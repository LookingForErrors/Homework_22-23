Номер 1
Number of trailing zeros of N!
https://www.codewars.com/kata/52f787eb172a8b4ae1000a34

Найти количество нулей в конце факториала числа

Мое решение:
Тут на википедии была гениальная формула и я ей воспользовался 

public class Solution {
  public static int zeros(int n) {
       //находим логарифм от числа по основанию 5
       int k_max = (int)Math.floor(Math.log(n)/Math.log(5));

        int counter = 0;
        //тут суммируем и это ответ
        //доказательство формулы наверное где-то есть, я над ним не думал
        for (int i = 1; i <= k_max; i++) {
            counter += (int)Math.floor(1.0*n/Math.pow(5, i));
        }

        return counter;
  }
}

Чужое решение:
Меньше строчек это конечно хорошо, но думать над ними не очень 

public class Solution {
  public static int zeros(final int n) {
    return (n < 5) ? 0 : (n / 5) + zeros(n / 5);
  }
}

Номер 2 
Weight for weight
https://www.codewars.com/kata/55c6126177c9441a570000cc

Сортировать массив чисел по сумме цифр(если сумма цифр одинакова, то сортировка идет в порядке строк)

Мое решение:
Буквально второй проект на java + лень искать как вызвывать сортировку, поэтому написана с нуля
Явно по скорости работы не лучшее решение и выглядит плохо, но зато весело
Компаратор тоже свой написал

import java.util.StringJoiner;

public class WeightSort {
      //Компаратор для строк
      public static boolean Compare(String str1, String str2){
        int sum1 = 0;
        int sum2 = 0;
        for (String iterable_element : str1.split("")) {
            sum1 += Integer.parseInt(iterable_element);
        }
        for (String iterable_element : str2.split("")) {
            sum2 += Integer.parseInt(iterable_element);
        }
        if(sum1 > sum2) return true;
        if(sum1 < sum2) return false;
        if(sum1 == sum2) return str1.compareTo(str2) > 0 ? true : false;
        return false;
    }
    //Простейшая линейная сортировка
    public static String[] linear_sort(String[] strNumbs_array) {
        for (int i = 0; i < strNumbs_array.length; i++) {
            for (int j = i; j < strNumbs_array.length; j++) {
                if (Compare(strNumbs_array[i], strNumbs_array[j])) {
                    var tmp_substring = strNumbs_array[i];
                    strNumbs_array[i] = strNumbs_array[j];
                    strNumbs_array[j] = tmp_substring;
                } else {
                    continue;
                }
            }
        }
        return strNumbs_array;
    }

  //Само сравнение. Если взять готовые компараторы и сортировку, 
  то останется только блок ниже, с небольшими изменениями
  
  public static String orderWeight(String strng) {
    String[] tmp_str = strng.split(" ");
    String zero_str = "";
    if(strng.equals(zero_str)) return strng;
    String[] result_string = linear_sort(tmp_str);
    StringJoiner joiner = new StringJoiner(" ");
    for (String string : result_string) {
        joiner.add(string);
    }
    String joined = joiner.toString();
    return joined;
  }
}

Чужое решение:
Тут произошел какой-то import solution.

import java.util.stream.IntStream;
import java.util.Comparator;
import java.util.stream.Collectors;
import java.util.Arrays;

public class WeightSort {
  
  public static String orderWeight(String strng) {
    return
      Arrays.stream(strng.split(" "))
        .sorted(Comparator
          .comparing(WeightSort::sumDigits)
          .thenComparing(String::compareTo))
        .collect(Collectors.joining(" "));
        
  }

  private static Integer sumDigits(String s) {
    return s.chars().map(c -> c - 48).sum();
  }
}
